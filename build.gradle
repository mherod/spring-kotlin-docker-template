buildscript {
    gradle.startParameter.buildCacheEnabled = true
    gradle.startParameter.rerunTasks = gradle.startParameter.rerunTasks || gradle.startParameter.taskRequests.any {
        it.args.any { it.startsWith("deploy") }
    }
    ext {
        kotlinVersion = '1.2.30'
        springBootVersion = '2.0.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.1'
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

ext.gitRevCount = 0
if (gitRevCount == 0) {
    ext.gitRevCount = "git rev-list HEAD --count"
            .execute().text.trim().toInteger()
}

group = 'co.herod'
version = "0.0.$gitRevCount-SNAPSHOT"

ext.mainClassName = 'co.herod.saysparty.BackendApplicationKt'
mainClassName = ext.mainClassName

sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
}

bootRun {
    main = rootProject.mainClassName
}
shadowJar {
    mainClassName = rootProject.mainClassName
    version = rootProject.version
    baseName = 'my-application'
    classifier = null
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-cache'
    compile 'org.springframework.boot:spring-boot-starter-mustache'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin'
    compile 'org.springframework.retry:spring-retry'
    compile 'org.springframework.session:spring-session-core'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    runtime 'org.springframework.boot:spring-boot-devtools'
    runtime 'mysql:mysql-connector-java'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.springframework.security:spring-security-test'
}

task deployDocker {
    build.dependsOn += clean
    dependsOn += build
    bootJar.mustRunAfter clean
    mustRunAfter bootJar
    doLast {
        "sh deploy-docker.sh".execute().inputStream.eachLine { println it }
    }
}