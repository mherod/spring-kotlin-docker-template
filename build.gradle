buildscript {
    gradle.startParameter.buildCacheEnabled = true
    gradle.startParameter.rerunTasks = gradle.startParameter.rerunTasks || gradle.startParameter.taskRequests.any {
        it.args.any { it.startsWith("deploy") }
    }
    ext {
        kotlinVersion = '1.2.30'
        springBootVersion = '2.0.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
    }
}
plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.1'
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

try {
    ext.gitRevCount = "git rev-list HEAD --count".execute().text.trim().toInteger()
} catch (e) {
    ext.gitRevCount = 0
}

group = 'co.herod'
version = ext.version = "0.0.${gitRevCount}-SNAPSHOT".toString()
ext.sanitisedProjectName = "${name}".replace('-', '')
ext.projectPackage = "${group}.${sanitisedProjectName}".replace('-', '')
ext.mainClassName = "${projectPackage}.BackendApplicationKt".toString()
//noinspection GroovyUnusedAssignment
mainClassName = ext.mainClassName

ext.groupPackagePath = group.replace('.', '/')

println "Project name: $rootProject.name"
println "Project group: $rootProject.group"
println "Project version: $rootProject.version"
println "Project mainClassName: $rootProject.mainClassName"
println "Project sourceCompatibility: $rootProject.sourceCompatibility"

file('.version').text = "git rev-list HEAD --count".execute().text
file('.name').text = rootProject.name

sourceCompatibility = 1.8

compileKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    generated {
        ["java", "kotlin"].each {
            java.srcDir file("src/$name/$it")
        }
        resources.srcDir file("src/$name/resources")
    }
    main {
        java.srcDirs += generated.java.srcDirs
    }
}

sourceSets.forEach { sourceSet ->
    ["java", "kotlin"].each {
        sourceSet.java.srcDir file("src/$sourceSet.name/$it")
    }
    sourceSet.resources.srcDir file("src/$sourceSet.name/resources")
}
sourceSets.forEach { sourceSet ->
    sourceSet.java.srcDirs.forEach { it.mkdirs() }
}
sourceSets.forEach { sourceSet ->
    sourceSet.java.srcDirs.each { sourceDir ->
        if (!sourceSets.generated.java.srcDirs.contains(sourceDir)) {
            def groupPathString = "${sourceDir.path}/${rootProject.groupPackagePath}"
            file(groupPathString).listFiles().each { File file ->
                if (file.isDirectory()) {
                    file.renameTo("$groupPathString/${sanitisedProjectName}")
                }
            }
        }
    }
}

bootRun {
    main = rootProject.mainClassName
}
shadowJar {
    mainClassName = rootProject.mainClassName
    version = rootProject.version
    baseName = rootProject.name
    classifier = null
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-cache'
    compile 'org.springframework.boot:spring-boot-starter-mustache'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin'
    compile 'org.springframework.retry:spring-retry'
    compile 'org.springframework.session:spring-session-core'
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile "org.jetbrains.kotlin:kotlin-reflect"
    runtime 'org.springframework.boot:spring-boot-devtools'
    runtime 'mysql:mysql-connector-java'
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.springframework.security:spring-security-test'
}

task cleanVcs(type: Task) {
    doLast {
        "git clean -fXd".execute().inputStream.eachLine { println it }
    }
}

task deployDocker(type: Task) {
    build.dependsOn += clean
    dependsOn += build
    bootJar.mustRunAfter clean
    mustRunAfter bootJar
    doLast {
        "sh deploy-docker.sh".execute().inputStream.eachLine { println it }
    }
}


task generateBuildConfig(type: Task) {
    doLast {
        def buildConfigClassName = "BuildConfig"
        def genSourceDir = sourceSets.generated.java.srcDirs.first()
        def genSrcPath = "$genSourceDir.path/${projectPackage.replace('.', '/')}"
        file(genSrcPath).mkdirs()
        def buildConfigFilePath = "$genSrcPath/${buildConfigClassName}.java"
        println buildConfigFilePath
        def buildConfigFile = file(buildConfigFilePath)
        buildConfigFile.text = """
package ${rootProject.projectPackage};

public class $buildConfigClassName {
    @SuppressWarnings("unused")
    public static final String PROJECT_NAME = "${rootProject.name}";

    @SuppressWarnings("unused")
    public static final String PROJECT_VERSION = "${rootProject.version}";

    @SuppressWarnings("unused")
    public static final String MAIN_CLASS_NAME = "${rootProject.mainClassName}";
}
""".trim().toString()
    }
}

deployDocker.mustRunAfter assemble
deployDocker.dependsOn assemble
compileGeneratedJava.mustRunAfter generateBuildConfig
assemble.mustRunAfter generateBuildConfig
assemble.dependsOn generateBuildConfig
